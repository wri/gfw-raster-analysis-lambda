#!/usr/bin/env bash

set -e

#!/usr/bin/env bash

set -e

BRANCH=""

while getopts b:k:s: option; do
  case "${option}" in

  b) BRANCH=${OPTARG} ;;
  k) AWS_ACCESS_KEY_ID=${OPTARG} ;;
  s) AWS_SECRET_ACCESS_KEY=${OPTARG} ;;
  esac
done

AWS_PROFILE="gfw-dev" # For tests always use dev profile, even for master and develop branch, we need to access the test bucket

if [ -z "${AWS_ACCESS_KEY_ID}" ]; then
  # when running locally, use AWS Profile and load latest code, write data to tmp
  echo "Running test with CWD set to /tmp"
  docker run -e AWS_DEFAULT_PROFILE=${AWS_PROFILE} \
              -v /tmp:/tmp \
              -v ${PWD}:/usr/local/app \
              -v ${HOME}/.aws:/root/.aws:ro\
              -e ENV="test" \
              --rm \
              --entrypoint pytest gfw-raster-analysis-test \
              --cov-report term --cov-report xml:/usr/local/app/tests/cobertura.xml --cov=/usr/local/app \
              /usr/local/app/tests/
else
  # when running on Github, use Secrets and link pwd to tmp to have access to coverage file
  echo "Running test with CWD set to ."
  docker run -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
              -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}  \
              -v /tmp:/tmp \
              -v ${PWD}:/usr/local/app \
              -w /usr/local/app \
              -e ENV="test" \
              --rm \
              --entrypoint pytest gfw-raster-analysis-test \
              --cov-report term --cov-report xml:/usr/local/app/tests/cobertura.xml --cov=/usr/local/app \
              /usr/local/app/tests/
fi